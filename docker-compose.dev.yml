services:
  db:
    container_name: db
    image: postgres:17
    ports:
      - "5435:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:

      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
  api:
    build:
      context: .
      target: development
    environment:
      - BUN_WATCH_MODE=1
      - DATABASE_URL=${DATABASE_URL_DOCKER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    command: >
      sh -c "
        echo 'Initializing database...' &&
        sh ./init-db.sh &&
        echo 'Waiting additional time for DB to be fully ready...' &&
        sleep 5 &&
        echo 'Running migrations...' &&
        bun run db:migrate &&
        echo 'Starting development server...' &&
        bun dev
      "
    volumes:
      - .:/app
      - /app/node_modules
      - /bun-cache:/bun-dir
      - ./init-db.sh:/app/init-db.sh
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
    driver: local
  bun-cache:
    driver: local
    
